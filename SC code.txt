import java.util.Scanner;
public class VernamCipher {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter plaintext: ");
        String pt = sc.nextLine();
        System.out.print("Enter key: ");
        String key = sc.nextLine();
        if (pt.length() != key.length()) {
            System.out.println("Key length must be equal to plaintext length");
            return;
        }
        StringBuilder ct = new StringBuilder();
        for (int i = 0; i < pt.length(); i++) {
            char ec = (char)(pt.charAt(i) ^ key.charAt(i));
            ct.append(ec);
        }
        System.out.print("Encrypted text (raw): ");
for (int i = 0; i < ct.length(); i++) {
    System.out.print(Integer.toBinaryString((int)ct.charAt(i)) + " ");
}
System.out.println(); 
        //System.out.println("Encrypted text: " + ct.toString());
        StringBuilder dt = new StringBuilder();
        for (int i = 0; i < ct.length(); i++) {
            char dc = (char) (ct.charAt(i) ^ key.charAt(i));
            dt.append(dc);
        }
        System.out.println("Decrypted text: " + dt.toString());
    }
}


 import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;
import java.security.InvalidKeyException;
import java.security.Key;
import java.security.NoSuchAlgorithmException;
import java.util.*;
public class SHAExample {
    public static void main(String[] args) {
        try {
            Scanner sc=new Scanner(System.in);
            String secretKey = sc.nextLine(); 
            String message = sc.nextLine();
            byte[] hmac = generateHmacSHA256(secretKey, message.getBytes());
            System.out.println("Original Message: " + message);
            System.out.println("Generated HMAC: " + bytesToHex(hmac));
        } catch (NoSuchAlgorithmException | InvalidKeyException e) {
            e.printStackTrace();
        }
    }
    private static byte[] generateHmacSHA256(String secretKey, byte[] message) throws NoSuchAlgorithmException, InvalidKeyException {
        Key key = new SecretKeySpec(secretKey.getBytes(), "HmacSHA256");
        Mac mac = Mac.getInstance("HmacSHA256");
        mac.init(key);
        return mac.doFinal(message);
    }
    private static String bytesToHex(byte[] bytes) {
        StringBuilder result = new StringBuilder();
        for (byte b : bytes) {
            result.append(String.format("%02x", b));
        }
        return result.toString();
    }
}

import java.security.Key;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.InvalidKeyException; 
import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;
import java.util.*;
public class MD5MACExample {
    public static void main(String[] args) {
        try {
        Scanner sc=new Scanner(System.in);
            String secretKey = sc.nextLine(); 
            String message = sc.nextLine();        
            byte[] mac = generateMD5MAC(secretKey, message.getBytes());
           System.out.println("Original Message: " + message);
            System.out.println("Generated MAC: " + bytesToHex(mac));
        } catch (NoSuchAlgorithmException | InvalidKeyException e) {
            e.printStackTrace();
        }
    }
    private static byte[] generateMD5MAC(String secretKey, byte[] message) throws NoSuchAlgorithmException, InvalidKeyException {
        MessageDigest md = MessageDigest.getInstance("MD5");
        byte[] keyBytes = secretKey.getBytes();
        Key key = new SecretKeySpec(keyBytes, "HmacMD5");
        Mac mac = Mac.getInstance("HmacMD5");
        mac.init(key);
        return mac.doFinal(message);
    }
    private static String bytesToHex(byte[] bytes) {
        StringBuilder result = new StringBuilder();
        for (byte b : bytes) {
            result.append(String.format("%02x", b));
        }
        return result.toString();
    }
}


import java.security.*;
import java.util.Base64;
import java.util.Scanner;
public class DSE {
    public static void main(String[] args) throws Exception {
        KeyPair keyPair = KeyPairGenerator.getInstance("RSA").generateKeyPair();
        Scanner scanner = new Scanner(System.in);

        System.out.println("Enter the message:");
        String message = scanner.nextLine();

        Signature signer = Signature.getInstance("SHA256withRSA");
        signer.initSign(keyPair.getPrivate());
        signer.update(message.getBytes());
        byte[] signature = signer.sign();

        System.out.println("Digital Signature: " + Base64.getEncoder().encodeToString(signature));

        Signature verifier = Signature.getInstance("SHA256withRSA");
        verifier.initVerify(keyPair.getPublic());
        verifier.update(message.getBytes());
        boolean isVerified = verifier.verify(signature);

        System.out.println("Signature verified: " + isVerified);
    }
}


import javax.crypto.*;
import java.util.Base64;
import java.util.Scanner;
public class DESDemo {
    public static void main(String[] args) throws Exception {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter the plaintext: ");
        String plaintext = scanner.nextLine();
        SecretKey key = generateDESKey();
        Cipher cipher = Cipher.getInstance("DES");
        cipher.init(Cipher.ENCRYPT_MODE, key);
        byte[] encryptedBytes = cipher.doFinal(plaintext.getBytes());
        String encryptedBase64 = Base64.getEncoder().encodeToString(encryptedBytes);
        System.out.println("Encrypted text (Base64): " + encryptedBase64);
        cipher.init(Cipher.DECRYPT_MODE, key);
        byte[] decryptedBytes = cipher.doFinal(Base64.getDecoder().decode(encryptedBase64));
        String decryptedText = new String(decryptedBytes);
        System.out.println("Decrypted text: " + decryptedText);
    }
    private static SecretKey generateDESKey() throws Exception {
        KeyGenerator keyGen = KeyGenerator.getInstance("DES");
        return keyGen.generateKey();
    }
}



import javax.crypto.*;
import java.util.Base64;
import java.util.Scanner;
public class AESDemo {
    public static void main(String[] args) throws Exception {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter the plaintext: ");
        String plaintext = scanner.nextLine();
        SecretKey key = generateAESKey();
        Cipher cipher = Cipher.getInstance("AES");
        cipher.init(Cipher.ENCRYPT_MODE, key);
        byte[] encryptedBytes = cipher.doFinal(plaintext.getBytes());
        String encryptedBase64 = Base64.getEncoder().encodeToString(encryptedBytes);
        System.out.println("Encrypted text (Base64): " + encryptedBase64);
        cipher.init(Cipher.DECRYPT_MODE, key);
        byte[] decryptedBytes = cipher.doFinal(Base64.getDecoder().decode(encryptedBase64));
        String decryptedText = new String(decryptedBytes);
        System.out.println("Decrypted text: " + decryptedText);
    }
    private static SecretKey generateAESKey() throws Exception {
        KeyGenerator keyGen = KeyGenerator.getInstance("AES");
        return keyGen.generateKey();
    }
}


import java.util.Scanner;
public class ED{
  public static void main(String[] args) {
        String Sc="ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        String s="abcdefghijklmnopqrstuvwxyz";
        Scanner sc=new Scanner(System.in);
        System.out.println("Enter the Input text");
        String inputext=sc.nextLine();
        System.out.println("Enter the secret key");
        int ky=sc.nextInt();
        String cipherext="";
        for(int i=0;i<inputext.length();i++){
            char a=inputext.charAt(i);
            if(Character.isUpperCase(a)){
                cipherext+=Sc.charAt((Sc.indexOf(a)+ky)%26);
            }
            else{
                cipherext+=s.charAt((s.indexOf(a)+ky)%26);
            }
        }
        System.out.println(" Encrypted Cipher text is "+cipherext);
        System.out.println("Enter the Input text");
        String inputtext=sc.next();
        System.out.println("Enter the secret key");
        int key=sc.nextInt();
        String ciphertext="";
        for(int i=0;i<inputtext.length();i++){
            char a=inputtext.charAt(i);
            int b=0;
            if(Character.isUpperCase(a)){
                b=(Sc.indexOf(a)-key)%26;
                if(b<0)
                ciphertext+=Sc.charAt(b+26);
                else
                 ciphertext+=Sc.charAt(b);
            }
            else{
                b=(s.indexOf(a)-key)%26;
                if(b<0)
                ciphertext+=s.charAt(b+26);
                else
                 ciphertext+=s.charAt(b);
            }
        }
        System.out.println("Decrypted Plain Text is "+ciphertext);
    }
}